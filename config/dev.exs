import Config

# Configure your database
config :up_img, UpImg.Repo,
  username: System.fetch_env!("DB_USER"),
  password: System.fetch_env!("DB_PWD"),
  hostname: System.fetch_env!("DB_HOST"),
  database: System.fetch_env!("DB_NAME"),
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10,
  socket_options: [:inet6]

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :up_img, UpImgWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "V1w+D1/rAwqs0frDx/77iNkYb+XlMPdAei+3y3+6VpNKlZBLiehBNlJRhoUWSu6V",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ]

# config :ex_aws, :s3,
#   access_key_id: System.get_env("AWS_ACCESS_KEY_ID"),
#   secret_access_key: System.get_env("AWS_SECRET_ACCESS_KEY"),
#   region: System.get_env("AWS_REGION"),
#   bucket: System.get_env("AWS_S3_BUCKET"),
#   request_config_override: %{},
#   debug_requests: true

# config :ex_aws, :s3,
#   debug_requests: true,
#   bucket: System.get_env("B2_BUCKET"),
#   access_key_id: System.get_env("B2_KEY_ID"),
#   secret_access_key: System.get_env("B2_KEY_SECRET"),
#   host:
#     "https://s3." <>
#       System.get_env("B2_REGION") <>
#       "." <> System.get_env("B2_AUTH") <> "/" <> System.get_env("B2_BUCKET"),
#   region: System.get_env("B2_REGION")

config :ex_aws, :s3,
  r2_account_id: System.get_env("R2_ACCOUNT_ID"),
  host: System.get_env("R2_ENDPOINT"),
  access_key_id: System.get_env("R2_CLIENT_ID"),
  secret_access_key: System.get_env("R2_CLIENT_SECRET"),
  bucket: System.get_env("R2_BUCKET")

config :up_img, :github,
  github_client_id: System.get_env("GITHUB_CLIENT_ID"),
  github_client_secret: System.get_env("GITHUB_CLIENT_SECRET")

config :up_img, :google,
  google_client_id: System.get_env("GOOGLE_CLIENT_ID"),
  google_client_secret: System.get_env("GOOGLE_CLIENT_SECRET")

config :up_img, :vault_key, System.fetch_env!("CLOAK_KEY")

config :up_img, :cleaning_timer, 2 * 60 * 1_000

config :up_img, :upload_limit, System.fetch_env!("UPLOAD_LIMIT") |> String.to_integer()

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :up_img, UpImgWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/[^image_uploads].*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/up_img_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :up_img, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Disable swoosh api client as it is only required for production adapters.
# config :swoosh, :api_client, false
